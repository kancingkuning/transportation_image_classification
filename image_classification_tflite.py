# -*- coding: utf-8 -*-
"""Image_Classification_tflite.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DeyXEsiER7enetSLml419lhqb2trPESr

#Regina Aprilia Roberto
#Submission Image Classification 
Dataset: https://www.kaggle.com/datasets/abtabm/multiclassimagedatasetairplanecar?select=Dataset
"""

!pip install kaggle

import os
import glob
import numpy as np
import tensorflow as tf
from google.colab import files
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.optimizers import Adam
import matplotlib.pyplot as plt
from tensorflow.keras.layers import Input
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Activation, Dense, Flatten
import pathlib

from google.colab import files
files.upload()

! mkdir ~/.kaggle
! cp kaggle.json ~/.kaggle/
! chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d abtabm/multiclassimagedatasetairplanecar

!unzip /content/multiclassimagedatasetairplanecar -d /content

base_dir = '/content/Dataset/train'
total_image = len(list(glob.iglob("/content/Dataset/train/*/*.*", recursive=True)))
print("Total all image train: ",total_image)

ship_dir = os.path.join('/content/Dataset/train/ship')
car_dir = os.path.join('/content/Dataset/train/cars')
airplanes_dir = os.path.join('/content/Dataset/train/airplanes')

total_image = len(list(glob.iglob("/content/Dataset/train/*/*.*", recursive=True)))
print("Total all image: ",total_image)

total_ship = len(os.listdir(ship_dir))
total_car = len(os.listdir(car_dir))
total_airplane = len(os.listdir(airplanes_dir))

# Mencetak jumlah data rock paper scissor
print("Ship: ",total_ship)
print("Car: ",total_car)
print("Airplane: ",total_airplane)

def rules():
  rotation_range = 30
  brightness_range = [0.2, 1.0]
  shear_range = 0.2
  zoom_range = 0.2
  horizontal_flip = True
  fill_mode = 'nearest'
  rescale = 1./255
  return rules

w = 150
h = 150
train_datagen = ImageDataGenerator(rules, validation_split = 0.2)
train_set = train_datagen.flow_from_directory(
    base_dir,
    target_size = (w, h),
    color_mode = "rgb",
    class_mode = "categorical",
    batch_size = 32,
    shuffle = True,
    subset = "training"
)
validation_datagen = ImageDataGenerator(rules, validation_split = 0.2)
validation_set = validation_datagen.flow_from_directory(
    base_dir,
    target_size = (w, h),
    color_mode = "rgb",
    class_mode = "categorical",
    batch_size = 32,
    shuffle = False,
    subset = "validation"
)

pre_trained_model = tf.keras.applications.VGG16(input_shape=(150, 150, 3),
                                                include_top=False,
                                                weights="imagenet")
for layer in pre_trained_model.layers:
  layer.trainable = False

add_layer = pre_trained_model.get_layer('block5_pool')
add_output = add_layer.output
x = tf.keras.layers.GlobalMaxPooling2D()(add_output)
x = tf.keras.layers.Dense(512, activation='relu')(x)
x = tf.keras.layers.Dropout(0.5)(x)
x = tf.keras.layers.Dense(3, activation='softmax')(x)
model = tf.keras.Model(pre_trained_model.input, x)

Adam(learning_rate = 0.0001, name='Adam')
model.compile(optimizer='Adam', loss='categorical_crossentropy', metrics=['accuracy'])
model.summary()

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('accuracy') > 0.97 and logs.get('val_accuracy') > 0.97):
      print('stop training')
      self.model.stop_training = True

callbacks = myCallback()

epochs = 10

history = model.fit(train_set,
                    epochs=epochs,
                    validation_data=validation_set,
                    callbacks=[callbacks])

akurasi = history.history['accuracy']
val_acc = history.history['val_accuracy']

range_epochs = range(2)

plt.figure(figsize=(10,10))
plt.subplot(1, 2, 1)
plt.plot(range_epochs, akurasi, val_acc)
plt.title('Model accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['Train', 'Test'], loc='lower right')

loss = history.history['loss']
val_loss = history.history['val_loss']

plt.subplot(1, 2, 2)
plt.plot(range_epochs, loss, val_loss)
plt.title('Model loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train', 'Test'], loc='upper right')
plt.show()

model.save("model.h5")

model = tf.keras.models.load_model('model.h5')
converter = tf.lite.TFLiteConverter.from_keras_model(model)
tflite_model = converter.convert()
open("model.tflite", "wb").write(tflite_model);